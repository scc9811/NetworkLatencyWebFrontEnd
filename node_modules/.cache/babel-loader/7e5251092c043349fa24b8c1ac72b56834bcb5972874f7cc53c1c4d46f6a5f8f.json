{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/NetworkLatencyWebFrontEnd/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  // const [socketData, setSocketData] = useState(null);\n  // const [isAllowed, setIsAllowed] = useState(null);\n  const [publicIP, setPublicIP] = useState('');\n  // const [responseCount, setResponseCount] = useState(0); // 응답 횟수 상태 추가\n\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n\n  const storeResult = async () => {\n    // const { averageResponseTime } = socketData;\n    // Save averageResponseTime to localStorage\n    // localStorage.setItem('averageResponseTime', averageResponseTime);\n\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n    console.log('token : ', token);\n    if (token) {\n      // token 있으면 --> 백엔드 서버로 userEmail, nickName 요청 가능.\n      try {\n        const response = await fetch('http://localhost:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            averageLatency\n          })\n        });\n        console.log('요청결과 : ', response);\n        if (response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        } else {\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n        window.location.href = '/user/signIn';\n      }\n    } else {\n      // alert('로그인이 필요합니다.');\n      window.location.href = '/user/signIn';\n    }\n  };\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, []);\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n    const maxRequests = 10;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++; // useRef를 사용하여 requestCount 증가\n        console.log('requestCount', requestCountRef.current);\n        console.log('maxR', maxRequests);\n      } else {\n        // 요청 횟수가 maxRequests를 넘으면 interval 정리\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = event => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / (responsesCount + 1); // 현재 응답 횟수 포함하여 계산\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"userIP\",\n      children: [\"Your Public IP : \", publicIP, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 37\n      }, this), \"Server IP : 54.180.58.154 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC9C0\\uC5F0\\uC2DC\\uAC04 : \", socket.averageLatency, \"ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), socket.running ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"storeButton\",\n          onClick: storeResult,\n          children: \"\\uACB0\\uACFC \\uC800\\uC7A5\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uC751\\uB2F5 \\uD69F\\uC218 : \", responsesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"728iBlCWctNYecfxyjD7/A+mKVE=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MainPage","_s","publicIP","setPublicIP","responsesCount","setResponsesCount","totalLatency","setTotalLatency","averageLatency","setAverageLatency","socket","setSocket","requestCountRef","storeResult","token","localStorage","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","ok","alert","window","location","href","error","fetchPublicIP","data","text","newSocket","WebSocket","close","maxRequests","interval","setInterval","current","clientTimeStamp","Date","getTime","message","send","clearInterval","onmessage","event","serverResponseData","parse","hasOwnProperty","latency","prevCount","prevLatency","average","toFixed","onclose","children","className","fileName","_jsxFileName","lineNumber","columnNumber","running","onClick","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/NetworkLatencyWebFrontEnd/src/pages/MainPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction MainPage() {\n  // const [socketData, setSocketData] = useState(null);\n  // const [isAllowed, setIsAllowed] = useState(null);\n  const [publicIP, setPublicIP] = useState('');\n  // const [responseCount, setResponseCount] = useState(0); // 응답 횟수 상태 추가\n\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n\n\n  const storeResult = async() => {\n    // const { averageResponseTime } = socketData;\n    // Save averageResponseTime to localStorage\n    // localStorage.setItem('averageResponseTime', averageResponseTime);\n\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n\n    console.log('token : ', token);\n    if (token) {\n      // token 있으면 --> 백엔드 서버로 userEmail, nickName 요청 가능.\n      try {\n        const response = await fetch('http://localhost:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({ averageLatency })\n        });\n        console.log('요청결과 : ', response);\n        if(response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        } else {\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n        window.location.href = '/user/signIn';\n      }\n    } else {\n      // alert('로그인이 필요합니다.');\n      window.location.href = '/user/signIn';\n    }\n  }\n\n\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, []);\n\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const maxRequests = 10;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++; // useRef를 사용하여 requestCount 증가\n        console.log('requestCount', requestCountRef.current);\n        console.log('maxR', maxRequests);\n      } else {\n        // 요청 횟수가 maxRequests를 넘으면 interval 정리\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = (event) => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / (responsesCount + 1); // 현재 응답 횟수 포함하여 계산\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n\n\n  \n  return (\n    <div>\n      <h1 className='userIP'>\n        Your Public IP : {publicIP} <br />\n        Server IP : 54.180.58.154 <br />\n      </h1>\n      <div className='myBox'>\n        <h1>네트워크 지연시간 : {socket.averageLatency}ms</h1>\n        {socket.running ? null : (\n          <div>\n            <button className='storeButton' onClick={storeResult}>결과 저장하기</button>\n          </div>\n        )}\n        <h2>응답 횟수 : {responsesCount}</h2> {/* 응답 횟수 표시 */}\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}