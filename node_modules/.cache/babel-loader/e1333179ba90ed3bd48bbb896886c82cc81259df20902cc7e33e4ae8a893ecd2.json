{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/pingTestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PingTestPage() {\n  _s();\n  const [pingResult, setPingResult] = useState('');\n  const [averagePing, setAveragePing] = useState(0);\n  useEffect(() => {\n    const fetchPingResult = async () => {\n      try {\n        const response = await fetch('/test');\n        if (response.ok) {\n          const result = await response.text();\n          setPingResult(result);\n        } else {\n          throw new Error('Failed to fetch ping result');\n        }\n      } catch (error) {\n        console.error('Error fetching ping result:', error);\n      }\n    };\n    const calculateAveragePing = () => {\n      // Assuming ping result is in milliseconds\n      const pingArray = pingResult.split('\\n');\n      const pingTimes = pingArray.map(line => line.match(/time=(\\d+)/)).filter(match => match !== null).map(match => parseInt(match[1]));\n      if (pingTimes.length > 0) {\n        const average = pingTimes.reduce((acc, curr) => acc + curr, 0) / pingTimes.length;\n        setAveragePing(average);\n      }\n    };\n    fetchPingResult();\n    calculateAveragePing();\n  }, [pingResult]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ping Test Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ping Result:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: pingResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average Ping: \", averagePing.toFixed(2), \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(PingTestPage, \"mAKwaXqM8D1kzYiXcoJpkEskWZ0=\");\n_c = PingTestPage;\nexport default PingTestPage;\nvar _c;\n$RefreshReg$(_c, \"PingTestPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PingTestPage","_s","pingResult","setPingResult","averagePing","setAveragePing","fetchPingResult","response","fetch","ok","result","text","Error","error","console","calculateAveragePing","pingArray","split","pingTimes","map","line","match","filter","parseInt","length","average","reduce","acc","curr","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/pingTestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction PingTestPage() {\n  const [pingResult, setPingResult] = useState('');\n  const [averagePing, setAveragePing] = useState(0);\n\n  useEffect(() => {\n    const fetchPingResult = async () => {\n      try {\n        const response = await fetch('/test');\n        if (response.ok) {\n          const result = await response.text();\n          setPingResult(result);\n        } else {\n          throw new Error('Failed to fetch ping result');\n        }\n      } catch (error) {\n        console.error('Error fetching ping result:', error);\n      }\n    };\n\n    const calculateAveragePing = () => {\n      // Assuming ping result is in milliseconds\n      const pingArray = pingResult.split('\\n');\n      const pingTimes = pingArray\n        .map((line) => line.match(/time=(\\d+)/))\n        .filter((match) => match !== null)\n        .map((match) => parseInt(match[1]));\n\n      if (pingTimes.length > 0) {\n        const average = pingTimes.reduce((acc, curr) => acc + curr, 0) / pingTimes.length;\n        setAveragePing(average);\n      }\n    };\n\n    fetchPingResult();\n    calculateAveragePing();\n  }, [pingResult]);\n\n  return (\n    <div>\n      <h1>Ping Test Page</h1>\n      <p>Ping Result:</p>\n      \n      <p>{pingResult}</p>\n      <p>Average Ping: {averagePing.toFixed(2)} ms</p>\n    </div>\n  );\n}\n\nexport default PingTestPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,OAAO,CAAC;QACrC,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UACpCR,aAAa,CAACO,MAAM,CAAC;QACvB,CAAC,MAAM;UACL,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;QAChD;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAED,MAAME,oBAAoB,GAAGA,CAAA,KAAM;MACjC;MACA,MAAMC,SAAS,GAAGd,UAAU,CAACe,KAAK,CAAC,IAAI,CAAC;MACxC,MAAMC,SAAS,GAAGF,SAAS,CACxBG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,YAAY,CAAC,CAAC,CACvCC,MAAM,CAAED,KAAK,IAAKA,KAAK,KAAK,IAAI,CAAC,CACjCF,GAAG,CAAEE,KAAK,IAAKE,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAErC,IAAIH,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;QACxB,MAAMC,OAAO,GAAGP,SAAS,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC,GAAGV,SAAS,CAACM,MAAM;QACjFnB,cAAc,CAACoB,OAAO,CAAC;MACzB;IACF,CAAC;IAEDnB,eAAe,CAAC,CAAC;IACjBS,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBlC,OAAA;MAAA8B,QAAA,EAAG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEnBlC,OAAA;MAAA8B,QAAA,EAAI3B;IAAU;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBlC,OAAA;MAAA8B,QAAA,GAAG,gBAAc,EAACzB,WAAW,CAAC8B,OAAO,CAAC,CAAC,CAAC,EAAC,KAAG;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAAChC,EAAA,CA9CQD,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAgDrB,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}