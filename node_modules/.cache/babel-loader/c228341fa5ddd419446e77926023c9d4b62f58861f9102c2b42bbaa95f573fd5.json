{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [socketData, setSocketData] = useState(null);\n  const [isAllowed, setIsAllowed] = useState(null);\n  const [publicIP, setPublicIP] = useState('');\n  const storeResult = async () => {\n    const {\n      averageResponseTime\n    } = socketData;\n    // Save averageResponseTime to localStorage\n    localStorage.setItem('averageResponseTime', averageResponseTime);\n\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n\n    // if (token) --> 바꿔야됨.\n    console.log('token : ', token);\n    if (token) {\n      // token 있으면 --> 백엔드 서버로 userEmail, nickName 요청 가능.\n      try {\n        const response = await fetch('http://localhost:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            averageResponseTime\n          })\n        });\n        console.log('요청결과 : ', response);\n        if (response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        } else {\n          // throw new Error('Network response was not ok');\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n        window.location.href = '/user/signIn';\n      }\n    } else {\n      window.location.href = '/user/signIn';\n    }\n  };\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/isICMPInboundAllowed');\n        const data = await response.json();\n        setIsAllowed(data.allowed);\n        console.log('data.allowed = ', data.allowed);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        window.location.href = '/guidePage';\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    // if (isAllowed === null) return;\n    if (!isAllowed) {\n      // allowed가 false인 경우 guidePage로 리다이렉트\n      // window.location.href = '/guidePage';\n      // return;\n    }\n\n    // WebSocket 연결\n    const ws = new WebSocket('ws://localhost:8080/socketConnection');\n\n    // 소켓 연결될 때 실행되는 함수\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    // 메시지를 수신할 때 실행되는 함수\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      setSocketData(data);\n    };\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 해제\n    return () => {\n      ws.close();\n    };\n  }, [isAllowed]);\n  if (isAllowed === null) {\n    // window.location.href = '/guidePage';\n    // return;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this);\n  }\n  if (!socketData) {\n    window.location.href = '/guidePage';\n    // return <div>Loading...</div>;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"userIP\",\n      children: [\"Your Public IP : \", publicIP, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 35\n      }, this), \"Server IP : 54.180.58.154 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\uD3C9\\uADE0 \\uC751\\uB2F5\\uC2DC\\uAC04 : \", socketData.averageResponseTime, \"\\uCD08\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), socketData.running ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"\\uD328\\uD0B7 \\uC190\\uC2E4 \\uBE44\\uC728 : \", socketData.packetLossRate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"storeButton\",\n          onClick: storeResult,\n          children: \"\\uACB0\\uACFC \\uC800\\uC7A5\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"jC/JM/9zrm6RsMGFOAIDeyrAxzU=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MainPage","_s","socketData","setSocketData","isAllowed","setIsAllowed","publicIP","setPublicIP","storeResult","averageResponseTime","localStorage","setItem","token","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","ok","alert","window","location","href","error","fetchPublicIP","data","text","fetchData","json","allowed","ws","WebSocket","onopen","onmessage","event","parse","close","children","fileName","_jsxFileName","lineNumber","columnNumber","className","running","packetLossRate","onClick","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/MainPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MainPage() {\n  const [socketData, setSocketData] = useState(null);\n  const [isAllowed, setIsAllowed] = useState(null);\n  const [publicIP, setPublicIP] = useState('');\n\n  const storeResult = async() => {\n    const { averageResponseTime } = socketData;\n    // Save averageResponseTime to localStorage\n    localStorage.setItem('averageResponseTime', averageResponseTime);\n\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n\n    // if (token) --> 바꿔야됨.\n    console.log('token : ', token);\n    if (token) {\n      // token 있으면 --> 백엔드 서버로 userEmail, nickName 요청 가능.\n      try {\n        const response = await fetch('http://localhost:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({ averageResponseTime })\n        });\n        console.log('요청결과 : ', response);\n        if(response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        }\n\n        else {\n          // throw new Error('Network response was not ok');\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n      }\n    } else {\n      window.location.href = '/user/signIn';\n    }\n  }\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/ping/isICMPInboundAllowed');\n        const data = await response.json();\n        setIsAllowed(data.allowed);\n        console.log('data.allowed = ', data.allowed);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        window.location.href = '/guidePage';\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    // if (isAllowed === null) return;\n    if (!isAllowed) {\n      // allowed가 false인 경우 guidePage로 리다이렉트\n      // window.location.href = '/guidePage';\n      // return;\n    }\n\n    // WebSocket 연결\n    const ws = new WebSocket('ws://localhost:8080/socketConnection');\n\n    // 소켓 연결될 때 실행되는 함수\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    // 메시지를 수신할 때 실행되는 함수\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      setSocketData(data);\n    };\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 해제\n    return () => {\n      ws.close();\n    };\n  }, [isAllowed]);\n\n  if (isAllowed === null) {\n    // window.location.href = '/guidePage';\n    // return;\n    return <div>Loading...</div>;\n  }\n\n  if (!socketData) {\n    window.location.href = '/guidePage';\n    // return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1 className='userIP'>\n\n      Your Public IP : {publicIP} <br />\n      Server IP : 54.180.58.154 <br />\n      \n      </h1>\n      {/* <h1 className='userIP'>Your IP : </h1>\n      <h1 className='userIP'>Server IP : </h1> */}\n      <div className='myBox'>\n        <h1>평균 응답시간 : {socketData.averageResponseTime}초</h1>\n        {socketData.running ? null : (\n          <div>\n            <h1>패킷 손실 비율 : {socketData.packetLossRate}</h1>\n            <button className='storeButton' onClick={storeResult}>결과 저장하기</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n  \n}\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}