{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestPage = () => {\n  _s();\n  const [latency, setLatency] = useState(null);\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n\n    // WebSocket이 연결되었을 때 실행되는 이벤트 핸들러\n    socket.onopen = () => {\n      // 현재 시간을 구합니다 (clientTimeStamp)\n      const clientTimeStamp = new Date().getTime();\n\n      // JSON 형식의 메시지를 만듭니다\n      const message = {\n        clientTimeStamp: clientTimeStamp\n      };\n\n      // JSON을 문자열로 변환하여 서버로 전송합니다\n      socket.send(JSON.stringify(message));\n    };\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = event => {\n      // 서버로부터의 응답 메시지를 처리합니다\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        setLatency(serverResponseData.latency); // 'latency' 필드 값을 상태로 업데이트\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // 컴포넌트 언마운트 시 WebSocket 연결을 닫습니다\n    return () => {\n      socket.close();\n    };\n  }, []); // useEffect의 두 번째 인자로 빈 배열을 전달하여 한 번만 실행되도록 설정합니다\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: latency !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Server latency: \", latency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"ZJOQnvdZuplKXpXxgbuOm1jcMS8=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TestPage","_s","latency","setLatency","socket","WebSocket","onopen","clientTimeStamp","Date","getTime","message","send","JSON","stringify","onmessage","event","serverResponseData","parse","data","hasOwnProperty","onclose","console","log","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TestPage = () => {\n  const [latency, setLatency] = useState(null);\n  \n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n\n    // WebSocket이 연결되었을 때 실행되는 이벤트 핸들러\n    socket.onopen = () => {\n        // 현재 시간을 구합니다 (clientTimeStamp)\n        const clientTimeStamp = new Date().getTime();\n        \n        // JSON 형식의 메시지를 만듭니다\n        const message = {\n            clientTimeStamp: clientTimeStamp\n        };\n\n        // JSON을 문자열로 변환하여 서버로 전송합니다\n        socket.send(JSON.stringify(message));\n    };\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = (event) => {\n        // 서버로부터의 응답 메시지를 처리합니다\n        const serverResponseData = JSON.parse(event.data);\n        if (serverResponseData.hasOwnProperty('latency')) {\n            setLatency(serverResponseData.latency); // 'latency' 필드 값을 상태로 업데이트\n        }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n        console.log('WebSocket connection closed');\n    };\n\n    // 컴포넌트 언마운트 시 WebSocket 연결을 닫습니다\n    return () => {\n        socket.close();\n    };\n  }, []); // useEffect의 두 번째 인자로 빈 배열을 전달하여 한 번만 실행되도록 설정합니다\n\n  return (\n    <div>\n      {latency !== null && (\n        <p>Server latency: {latency} ms</p>\n      )}\n    </div>\n  );\n};\n\nexport default TestPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMQ,MAAM,GAAG,IAAIC,SAAS,CAAC,uDAAuD,CAAC;;IAErF;IACAD,MAAM,CAACE,MAAM,GAAG,MAAM;MAClB;MACA,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;;MAE5C;MACA,MAAMC,OAAO,GAAG;QACZH,eAAe,EAAEA;MACrB,CAAC;;MAED;MACAH,MAAM,CAACO,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAC;IACxC,CAAC;;IAED;IACAN,MAAM,CAACU,SAAS,GAAIC,KAAK,IAAK;MAC1B;MACA,MAAMC,kBAAkB,GAAGJ,IAAI,CAACK,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;MACjD,IAAIF,kBAAkB,CAACG,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9ChB,UAAU,CAACa,kBAAkB,CAACd,OAAO,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC;;IAED;IACAE,MAAM,CAACgB,OAAO,GAAG,MAAM;MACnBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC9C,CAAC;;IAED;IACA,OAAO,MAAM;MACTlB,MAAM,CAACmB,KAAK,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACExB,OAAA;IAAAyB,QAAA,EACGtB,OAAO,KAAK,IAAI,iBACfH,OAAA;MAAAyB,QAAA,GAAG,kBAAgB,EAACtB,OAAO,EAAC,KAAG;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACnC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA/CID,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AAiDd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}