{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/NetworkLatencyWebFrontEnd/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [publicIP, setPublicIP] = useState('');\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const [isSocketClosed, setIsSocketClosed] = useState(false); // WebSocket 종료 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n  const [serverLocation, setServerLocation] = useState(null); // 서버 위치 상태\n  const [clientLocation, setClientLocation] = useState(null); // 클라이언트 위치 상태\n\n  const storeResult = async () => {\n    const token = localStorage.getItem('token');\n    console.log('token : ', token);\n    if (token) {\n      try {\n        const response = await fetch('http://scc9811.site:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            averageLatency\n          })\n        });\n        console.log('요청결과 : ', response);\n        if (response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        } else {\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n        window.location.href = '/user/signIn';\n      }\n    } else {\n      window.location.href = '/user/signIn';\n    }\n  };\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://scc9811.site:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, []);\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://scc9811.site:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      setIsSocketClosed(false); // WebSocket이 열렸을 때 상태 업데이트\n    };\n    newSocket.onclose = () => {\n      console.log('WebSocket connection closed');\n      setIsSocketClosed(true); // WebSocket이 닫혔을 때 상태 업데이트\n    };\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n    const maxRequests = 10;\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++;\n      } else {\n        socket.close();\n        clearInterval(interval);\n      }\n    }, 1000);\n    socket.onmessage = event => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n        const average = (totalLatency + latency) / (responsesCount + 1);\n        setAverageLatency(average.toFixed(2));\n      }\n    };\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n  useEffect(() => {\n    const fetchServerLocation = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/map/getServerLocation');\n        const data = await response.json();\n        setServerLocation({\n          lat: data.latitude,\n          lng: data.longitude\n        });\n      } catch (error) {\n        console.error('Error fetching server location:', error);\n      }\n    };\n    const fetchClientLocation = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/map/getClientLocation');\n        const data = await response.json();\n        setClientLocation({\n          lat: data.latitude,\n          lng: data.longitude\n        });\n      } catch (error) {\n        console.error('Error fetching client location:', error);\n      }\n    };\n    fetchServerLocation();\n    fetchClientLocation();\n  }, []);\n  useEffect(() => {\n    const initMap = () => {\n      if (!serverLocation || !clientLocation) return;\n      const centerPoint = {\n        lat: 37.5665,\n        lng: 126.9780\n      };\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        zoom: 8,\n        center: centerPoint\n      });\n      const markerA = new window.google.maps.Marker({\n        position: clientLocation,\n        map: map,\n        title: 'YOU',\n        label: {\n          text: 'YOU',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '12px',\n          className: 'map-label'\n        },\n        icon: {\n          path: window.google.maps.SymbolPath.CIRCLE,\n          scale: 25,\n          fillColor: '#FF0000',\n          fillOpacity: 1,\n          strokeWeight: 2,\n          strokeColor: '#FFFFFF'\n        }\n      });\n      const markerB = new window.google.maps.Marker({\n        position: serverLocation,\n        map: map,\n        title: 'SERVER',\n        label: {\n          text: 'SERVER',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '12px',\n          className: 'map-label'\n        },\n        icon: {\n          path: window.google.maps.SymbolPath.CIRCLE,\n          scale: 25,\n          fillColor: '#0000FF',\n          fillOpacity: 1,\n          strokeWeight: 2,\n          strokeColor: '#FFFFFF'\n        }\n      });\n      const line = new window.google.maps.Polyline({\n        path: [clientLocation, serverLocation],\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      });\n      line.setMap(map);\n    };\n    console.log;\n    if (window.google && serverLocation && clientLocation) {\n      initMap();\n    } else if (serverLocation && clientLocation) {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD2n27g34TSYRbMdDrdl3ZxlwtvAZa05tA`;\n      script.onload = initMap;\n      document.head.appendChild(script);\n    }\n  }, [serverLocation, clientLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"userIP\",\n      children: [\"Your Public IP : \", publicIP, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 37\n      }, this), \"Server IP : 54.180.58.154 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: '500px',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Latency Time : \", averageLatency, \"ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Test Count : \", responsesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), \" \", isSocketClosed &&\n      /*#__PURE__*/\n      // WebSocket이 닫혔을 때만 버튼 표시\n      _jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"storeButton\",\n          onClick: storeResult,\n          children: \"\\uACB0\\uACFC \\uC800\\uC7A5\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"41RN9JEREgrtHjXG01izQ5SJF30=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MainPage","_s","publicIP","setPublicIP","responsesCount","setResponsesCount","totalLatency","setTotalLatency","averageLatency","setAverageLatency","socket","setSocket","isSocketClosed","setIsSocketClosed","requestCountRef","serverLocation","setServerLocation","clientLocation","setClientLocation","storeResult","token","localStorage","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","ok","alert","window","location","href","error","fetchPublicIP","data","text","newSocket","WebSocket","onopen","onclose","close","maxRequests","interval","setInterval","current","clientTimeStamp","Date","getTime","message","send","clearInterval","onmessage","event","serverResponseData","parse","hasOwnProperty","latency","prevCount","prevLatency","average","toFixed","fetchServerLocation","json","lat","latitude","lng","longitude","fetchClientLocation","initMap","centerPoint","map","google","maps","Map","document","getElementById","zoom","center","markerA","Marker","position","title","label","color","fontWeight","fontSize","className","icon","path","SymbolPath","CIRCLE","scale","fillColor","fillOpacity","strokeWeight","strokeColor","markerB","line","Polyline","geodesic","strokeOpacity","setMap","script","createElement","src","onload","head","appendChild","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width","onClick","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/NetworkLatencyWebFrontEnd/src/pages/MainPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction MainPage() {\n  const [publicIP, setPublicIP] = useState('');\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const [isSocketClosed, setIsSocketClosed] = useState(false); // WebSocket 종료 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n  const [serverLocation, setServerLocation] = useState(null); // 서버 위치 상태\n  const [clientLocation, setClientLocation] = useState(null); // 클라이언트 위치 상태\n\n  const storeResult = async () => {\n    const token = localStorage.getItem('token');\n\n    console.log('token : ', token);\n    if (token) {\n      try {\n        const response = await fetch('http://scc9811.site:8080/ping/storeResult', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({ averageLatency })\n        });\n        console.log('요청결과 : ', response);\n        if (response.ok) {\n          alert('저장 완료');\n          window.location.href = '/user/myPage';\n        } else {\n          alert('로그인이 필요합니다');\n          window.location.href = '/user/signIn';\n        }\n      } catch (error) {\n        alert('로그인이 필요합니다');\n        window.location.href = '/user/signIn';\n      }\n    } else {\n      window.location.href = '/user/signIn';\n    }\n  }\n\n  useEffect(() => {\n    const fetchPublicIP = async () => {\n      try {\n        const response = await fetch('http://scc9811.site:8080/ping/getClientIP');\n        const data = await response.text();\n        setPublicIP(data);\n      } catch (error) {\n        console.error('Error fetching public IP:', error);\n      }\n    };\n    fetchPublicIP();\n  }, []);\n\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://scc9811.site:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    newSocket.onopen = () => {\n      setIsSocketClosed(false); // WebSocket이 열렸을 때 상태 업데이트\n    };\n\n    newSocket.onclose = () => {\n      console.log('WebSocket connection closed');\n      setIsSocketClosed(true); // WebSocket이 닫혔을 때 상태 업데이트\n    };\n\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const maxRequests = 10;\n\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++;\n      } else {\n        socket.close();\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    socket.onmessage = (event) => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        const average = (totalLatency + latency) / (responsesCount + 1);\n        setAverageLatency(average.toFixed(2));\n      }\n    };\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n\n  useEffect(() => {\n    const fetchServerLocation = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/map/getServerLocation');\n        const data = await response.json();\n        setServerLocation({ lat: data.latitude, lng: data.longitude });\n      } catch (error) {\n        console.error('Error fetching server location:', error);\n      }\n    };\n\n    const fetchClientLocation = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/map/getClientLocation');\n        const data = await response.json();\n        setClientLocation({ lat: data.latitude, lng: data.longitude });\n      } catch (error) {\n        console.error('Error fetching client location:', error);\n      }\n    };\n\n    fetchServerLocation();\n    fetchClientLocation();\n  }, []);\n\n  useEffect(() => {\n    const initMap = () => {\n      if (!serverLocation || !clientLocation) return;\n\n      const centerPoint = { lat: 37.5665, lng: 126.9780 };\n\n      const map = new window.google.maps.Map(document.getElementById('map'), {\n        zoom: 8,\n        center: centerPoint\n      });\n\n      const markerA = new window.google.maps.Marker({\n        position: clientLocation,\n        map: map,\n        title: 'YOU',\n        label: {\n          text: 'YOU',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '12px',\n          className: 'map-label'\n        },\n        icon: {\n          path: window.google.maps.SymbolPath.CIRCLE,\n          scale: 25,\n          fillColor: '#FF0000',\n          fillOpacity: 1,\n          strokeWeight: 2,\n          strokeColor: '#FFFFFF'\n        }\n      });\n\n      const markerB = new window.google.maps.Marker({\n        position: serverLocation,\n        map: map,\n        title: 'SERVER',\n        label: {\n          text: 'SERVER',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '12px',\n          className: 'map-label'\n        },\n        icon: {\n          path: window.google.maps.SymbolPath.CIRCLE,\n          scale: 25,\n          fillColor: '#0000FF',\n          fillOpacity: 1,\n          strokeWeight: 2,\n          strokeColor: '#FFFFFF'\n        }\n      });\n\n      const line = new window.google.maps.Polyline({\n        path: [clientLocation, serverLocation],\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      });\n\n      line.setMap(map);\n    };\n    console.log\n\n    if (window.google && serverLocation && clientLocation) {\n      initMap();\n    } else if (serverLocation && clientLocation) {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD2n27g34TSYRbMdDrdl3ZxlwtvAZa05tA`;\n      script.onload = initMap;\n      document.head.appendChild(script);\n    }\n  }, [serverLocation, clientLocation]);\n\n  return (\n    <div>\n      <h1 className='userIP'>\n        Your Public IP : {publicIP} <br />\n        Server IP : 54.180.58.154 <br />\n      </h1>\n      <div id=\"map\" style={{ height: '500px', width: '100%' }}></div>\n      <div className='myBox'>\n        <h1>Latency Time : {averageLatency}ms</h1>\n        <h2>Test Count : {responsesCount}</h2> {/* 응답 횟수 표시 */}\n        {isSocketClosed && ( // WebSocket이 닫혔을 때만 버튼 표시\n          <div>\n            <button className='storeButton' onClick={storeResult}>결과 저장하기</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}