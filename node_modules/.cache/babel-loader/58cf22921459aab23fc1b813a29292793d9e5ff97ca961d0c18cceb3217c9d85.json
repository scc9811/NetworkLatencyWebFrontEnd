{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestPage = () => {\n  _s();\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n\n  useEffect(() => {\n    const numRequests = 10;\n    let responsesReceived = 0;\n    let totalLatencySum = 0;\n    const socket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n\n    // WebSocket이 연결되었을 때 실행되는 이벤트 핸들러\n    socket.onopen = () => {\n      for (let i = 0; i < numRequests; i++) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n      }\n    };\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = event => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n        responsesReceived++;\n        totalLatencySum += latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(responsesReceived);\n        setTotalLatency(totalLatencySum);\n\n        // 모든 응답을 받은 경우 평균 latency 계산\n        if (responsesReceived === numRequests) {\n          const average = totalLatencySum / numRequests;\n          setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n        }\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // 컴포넌트 언마운트 시 WebSocket 연결을 닫습니다\n    return () => {\n      socket.close();\n    };\n  }, []); // useEffect의 두 번째 인자로 빈 배열을 전달하여 한 번만 실행되도록 설정합니다\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Responses received: \", responsesCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total latency: \", totalLatency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), averageLatency !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average latency: \", averageLatency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"jqO1xKGjwuR0frXybvHR+EJdp84=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TestPage","_s","responsesCount","setResponsesCount","totalLatency","setTotalLatency","averageLatency","setAverageLatency","numRequests","responsesReceived","totalLatencySum","socket","WebSocket","onopen","i","clientTimeStamp","Date","getTime","message","send","JSON","stringify","onmessage","event","serverResponseData","parse","data","hasOwnProperty","latency","average","toFixed","onclose","console","log","close","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TestPage = () => {\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  \n  useEffect(() => {\n    const numRequests = 10;\n    let responsesReceived = 0;\n    let totalLatencySum = 0;\n\n    const socket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n\n    // WebSocket이 연결되었을 때 실행되는 이벤트 핸들러\n    socket.onopen = () => {\n      for (let i = 0; i < numRequests; i++) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n      }\n    };\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = (event) => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n        responsesReceived++;\n        totalLatencySum += latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(responsesReceived);\n        setTotalLatency(totalLatencySum);\n\n        // 모든 응답을 받은 경우 평균 latency 계산\n        if (responsesReceived === numRequests) {\n          const average = totalLatencySum / numRequests;\n          setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n        }\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // 컴포넌트 언마운트 시 WebSocket 연결을 닫습니다\n    return () => {\n      socket.close();\n    };\n  }, []); // useEffect의 두 번째 인자로 빈 배열을 전달하여 한 번만 실행되도록 설정합니다\n\n  return (\n    <div style={{color:'white'}}>\n      <p>Responses received: {responsesCount}</p>\n      <p>Total latency: {totalLatency} ms</p>\n      {averageLatency !== null && (\n        <p>Average latency: {averageLatency} ms</p>\n      )}\n    </div>\n  );\n};\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}