{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestPage = () => {\n  _s();\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      const clientTimeStamp = new Date().getTime();\n      const message = {\n        clientTimeStamp: clientTimeStamp\n      };\n      socket.send(JSON.stringify(message));\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = event => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / responsesCount;\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Responses received: \", responsesCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total latency: \", totalLatency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), averageLatency !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average latency: \", averageLatency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"DfUs11cnbdOYw6wSnMnTXOLKaWc=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TestPage","_s","responsesCount","setResponsesCount","totalLatency","setTotalLatency","averageLatency","setAverageLatency","socket","setSocket","newSocket","WebSocket","close","interval","setInterval","clientTimeStamp","Date","getTime","message","send","JSON","stringify","onmessage","event","serverResponseData","parse","data","hasOwnProperty","latency","prevCount","prevLatency","average","toFixed","onclose","console","log","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TestPage = () => {\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      const clientTimeStamp = new Date().getTime();\n      const message = {\n        clientTimeStamp: clientTimeStamp\n      };\n      socket.send(JSON.stringify(message));\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = (event) => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / responsesCount;\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n\n  return (\n    <div>\n      <p>Responses received: {responsesCount}</p>\n      <p>Total latency: {totalLatency} ms</p>\n      {averageLatency !== null && (\n        <p>Average latency: {averageLatency} ms</p>\n      )}\n    </div>\n  );\n};\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}