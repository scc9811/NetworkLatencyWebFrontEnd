{"ast":null,"code":"var _jsxFileName = \"/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestPage = () => {\n  _s();\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n    const maxRequests = 10;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++; // useRef를 사용하여 requestCount 증가\n        console.log('requestCount', requestCountRef.current);\n        console.log('maxR', maxRequests);\n      } else {\n        // 요청 횟수가 maxRequests를 넘으면 interval 정리\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = event => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / (responsesCount + 1); // 현재 응답 횟수 포함하여 계산\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Responses received: \", responsesCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), averageLatency !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average latency: \", averageLatency, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"Pa71pg6VMi1hsAnofpbEvU3EKYM=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","TestPage","_s","responsesCount","setResponsesCount","totalLatency","setTotalLatency","averageLatency","setAverageLatency","socket","setSocket","requestCountRef","newSocket","WebSocket","close","maxRequests","interval","setInterval","current","clientTimeStamp","Date","getTime","message","send","JSON","stringify","console","log","clearInterval","onmessage","event","serverResponseData","parse","data","hasOwnProperty","latency","prevCount","prevLatency","average","toFixed","onclose","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/scc9811/GitHub/CapstoneDesign_FrontEnd/src/pages/TestPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst TestPage = () => {\n  const [responsesCount, setResponsesCount] = useState(0); // 응답 횟수 상태\n  const [totalLatency, setTotalLatency] = useState(0); // 총 latency 상태\n  const [averageLatency, setAverageLatency] = useState(null); // 평균 latency 상태\n  const [socket, setSocket] = useState(null); // WebSocket 상태\n  const requestCountRef = useRef(0); // 요청 횟수 useRef로 관리\n\n  useEffect(() => {\n    // WebSocket 연결\n    const newSocket = new WebSocket('ws://localhost:8080/networkLatencyWebSocketConnection');\n    setSocket(newSocket);\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결 닫기\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const maxRequests = 10;\n\n    // 1초마다 요청 보내기\n    const interval = setInterval(() => {\n      if (requestCountRef.current < maxRequests) {\n        const clientTimeStamp = new Date().getTime();\n        const message = {\n          clientTimeStamp: clientTimeStamp\n        };\n        socket.send(JSON.stringify(message));\n        requestCountRef.current++; // useRef를 사용하여 requestCount 증가\n        console.log('requestCount', requestCountRef.current);\n        console.log('maxR', maxRequests);\n      } else {\n        // 요청 횟수가 maxRequests를 넘으면 interval 정리\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    // 서버에서 메시지를 받았을 때 실행되는 이벤트 핸들러\n    socket.onmessage = (event) => {\n      const serverResponseData = JSON.parse(event.data);\n      if (serverResponseData.hasOwnProperty('latency')) {\n        const latency = serverResponseData.latency;\n\n        // 응답 횟수와 총 latency 업데이트\n        setResponsesCount(prevCount => prevCount + 1);\n        setTotalLatency(prevLatency => prevLatency + latency);\n\n        // 평균 latency 계산\n        const average = totalLatency / (responsesCount + 1); // 현재 응답 횟수 포함하여 계산\n        setAverageLatency(average.toFixed(2)); // 소수점 둘째 자리까지 표시\n      }\n    };\n\n    // 연결이 닫혔을 때 실행되는 이벤트 핸들러\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    // clearInterval을 사용하여 interval 정리\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, responsesCount, totalLatency]);\n\n  return (\n    <div style={{color:'white'}}>\n      <p>Responses received: {responsesCount}</p>\n      {averageLatency !== null && (\n        <p>Average latency: {averageLatency} ms</p>\n      )}\n    </div>\n  );\n};\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}